#pragma once

#include <unordered_map>
#include <string>

enum class TokenType {
    RETURN,
    LEFT_BRACE,
    RIGHT_BRACE,
    SEMICOLON,
    COMMA,
    IF,
    LEFT_BRACKET,
    RIGHT_BRACKET,
    ELSE,
    WHILE,
    FOR,
    IDENTIFIER,
    PLUS_ASSIGN,
    MINUS_ASSIGN,
    STAR_ASSIGN,
    DIVIDE_ASSIGN,
    MODULO_ASSIGN,
    DECREMENT,
    INCREMENT,
    ASSIGN,
    LOGICAL_NOT,
    PLUS,
    MINUS,
    STAR,
    DIVIDE,
    MODULO,
    NUMERIC,
    CHAR_LITTERAL,
    NOT_EQUAL,
    EQUAL,
    GREATER_THAN_OR_EQUAL,
    LESS_THAN_OR_EQUAL,
    LOGICAL_AND,
    LOGICAL_OR,
    INT,
    CHAR,
    LEFT_PAREN,
    RIGHT_PAREN,
    VOID,
    END_OF_TEXT,

   

    // Operators
    QUOTATION_MARK,
    APOSTROPHE,

    // Punctuators
    DOT,
    ARROW,
    COLON,
    AT,
    SPACE,
    NULL_CHARACTER,
    START_OF_HEADING,
    START_OF_TEXT,
    END_OF_TRANSMISSION,
    ENQUIRY,
    ACKNOWLEDGMENT,
    BELL,
    BACKSPACE,
    HORIZONTAL_TAB,
    LINE_FEED,
    VERTICAL_TAB,
    FORM_FEED,
    CARRIAGE_RETURN,
    SHIFT_OUT,
    SHIFT_IN,
    DATA_LINK_ESCAPE,
    DEVICE_CONTROL_1,
    DEVICE_CONTROL_2,
    DEVICE_CONTROL_3,
    DEVICE_CONTROL_4,
    NEGATIVE_ACKNOWLEDGMENT,
    SYNCHRONOUS_IDLE,
    END_OF_TRANSMISSION_BLOCK,
    CANCEL,
    END_OF_MEDIUM,
    SUBSTITUTE,
    ESCAPE,
    FILE_SEPARATOR,
    GROUP_SEPARATOR,
    RECORD_SEPARATOR,
    UNIT_SEPARATOR,
    //numbers
    ZERO,
    ONE,
    TWO,
    THREE,
    FOUR,
    FIVE,
    SIX,
    SEVEN,
    EIGHT,
    NINE,
    // Special
    LITTERAL,
    STRING_LITTERAL,
    ERROR,
    LESS_THAN,
    GREATER_THAN

};

static std::unordered_map<TokenType, std::string> tokenStringsMap = {
    {TokenType::CHAR, "char"},
    {TokenType::ELSE, "else"},
    {TokenType::FOR, "for"},
    {TokenType::IF, "if"},
    {TokenType::INT, "int"},
    {TokenType::RETURN, "return"},
    {TokenType::VOID, "void"},
    {TokenType::WHILE, "while"},
    {TokenType::INCREMENT, "++"},
    {TokenType::DECREMENT, "--"},
    {TokenType::PLUS_ASSIGN, "+="},
    {TokenType::MINUS_ASSIGN, "-="},
    {TokenType::STAR_ASSIGN, "*="},
    {TokenType::DIVIDE_ASSIGN, "/="},
    {TokenType::MODULO_ASSIGN, "%="},
    {TokenType::LOGICAL_AND, "&&"},
    {TokenType::LOGICAL_OR, "||"},
    {TokenType::LESS_THAN_OR_EQUAL, "<="},
    {TokenType::GREATER_THAN_OR_EQUAL, ">="},
    {TokenType::EQUAL, "=="},
    {TokenType::NOT_EQUAL, "!="},
    {TokenType::ARROW, "->"},

};

static std::unordered_map<TokenType, char> delimiterCharsMap = {
    {TokenType::PLUS, '+'},
    {TokenType::MINUS, '-'},
    {TokenType::STAR, '*'},
    {TokenType::SPACE, ' '},
    {TokenType::DIVIDE, '/'},
    {TokenType::MODULO, '%'},
    {TokenType::ASSIGN, '='},
    {TokenType::LOGICAL_NOT, '!'},
    {TokenType::LESS_THAN, '<'},
    {TokenType::GREATER_THAN, '>'},
    {TokenType::COMMA, ','},
    {TokenType::LEFT_BRACKET, '('},
    {TokenType::RIGHT_BRACKET, ')'},
    {TokenType::LEFT_PAREN, '['},
    {TokenType::RIGHT_PAREN, ']'},
    {TokenType::LEFT_BRACE, '{'},
    {TokenType::RIGHT_BRACE, '}'},
    {TokenType::DOT, '.'},
    {TokenType::SEMICOLON, ';'},
    {TokenType::COLON, ':'},
    {TokenType::NULL_CHARACTER, '\0'},
    {TokenType::START_OF_HEADING, '\x01'},
    {TokenType::START_OF_TEXT, '\x02'},
    {TokenType::END_OF_TEXT, '\x03'},
    {TokenType::END_OF_TRANSMISSION, '\x04'},
    {TokenType::ENQUIRY, '\x05'},
    {TokenType::ACKNOWLEDGMENT, '\x06'},
    {TokenType::BELL, '\x07'},
    {TokenType::BACKSPACE, '\x08'},
    {TokenType::HORIZONTAL_TAB, '\x09'},
    {TokenType::LINE_FEED, '\x0A'},
    {TokenType::VERTICAL_TAB, '\x0B'},
    {TokenType::FORM_FEED, '\x0C'},
    {TokenType::CARRIAGE_RETURN, '\x0D'},
    {TokenType::SHIFT_OUT, '\x0E'},
    {TokenType::SHIFT_IN, '\x0F'},
    {TokenType::DATA_LINK_ESCAPE, '\x10'},
    {TokenType::DEVICE_CONTROL_1, '\x11'},
    {TokenType::DEVICE_CONTROL_2, '\x12'},
    {TokenType::DEVICE_CONTROL_3, '\x13'},
    {TokenType::DEVICE_CONTROL_4, '\x14'},
    {TokenType::NEGATIVE_ACKNOWLEDGMENT, '\x15'},
    {TokenType::SYNCHRONOUS_IDLE, '\x16'},
    {TokenType::END_OF_TRANSMISSION_BLOCK, '\x17'},
    {TokenType::CANCEL, '\x18'},
    {TokenType::END_OF_MEDIUM, '\x19'},
    {TokenType::SUBSTITUTE, '\x1A'},
    {TokenType::ESCAPE, '\x1B'},
    {TokenType::FILE_SEPARATOR, '\x1C'},
    {TokenType::GROUP_SEPARATOR, '\x1D'},
    {TokenType::RECORD_SEPARATOR, '\x1E'},
    {TokenType::UNIT_SEPARATOR, '\x1F'},
    {TokenType::QUOTATION_MARK, '\"'},
    {TokenType::APOSTROPHE, '\''},
};

static std::unordered_map<TokenType, char> parserDelimiterCharsMap = {
    {TokenType::SPACE, ' '},
    {TokenType::NULL_CHARACTER, '\0'},
    { TokenType::START_OF_HEADING, '\x01' },
    { TokenType::START_OF_TEXT, '\x02' },
    { TokenType::END_OF_TRANSMISSION, '\x04' },
    { TokenType::ENQUIRY, '\x05' },
    { TokenType::ACKNOWLEDGMENT, '\x06' },
    { TokenType::BELL, '\x07' },
    { TokenType::BACKSPACE, '\x08' },
    { TokenType::HORIZONTAL_TAB, '\x09' },
    { TokenType::LINE_FEED, '\x0A' },
    { TokenType::VERTICAL_TAB, '\x0B' },
    { TokenType::FORM_FEED, '\x0C' },
    { TokenType::CARRIAGE_RETURN, '\x0D' },
    { TokenType::SHIFT_OUT, '\x0E' },
    { TokenType::SHIFT_IN, '\x0F' },
    { TokenType::DATA_LINK_ESCAPE, '\x10' },
    { TokenType::DEVICE_CONTROL_1, '\x11' },
    { TokenType::DEVICE_CONTROL_2, '\x12' },
    { TokenType::DEVICE_CONTROL_3, '\x13' },
    { TokenType::DEVICE_CONTROL_4, '\x14' },
    { TokenType::NEGATIVE_ACKNOWLEDGMENT, '\x15' },
    { TokenType::SYNCHRONOUS_IDLE, '\x16' },
    { TokenType::END_OF_TRANSMISSION_BLOCK, '\x17' },
    { TokenType::CANCEL, '\x18' },
    { TokenType::END_OF_MEDIUM, '\x19' },
    { TokenType::SUBSTITUTE, '\x1A' },
    { TokenType::ESCAPE, '\x1B' },
    { TokenType::FILE_SEPARATOR, '\x1C' },
    { TokenType::GROUP_SEPARATOR, '\x1D' },
    { TokenType::RECORD_SEPARATOR, '\x1E' },
    { TokenType::UNIT_SEPARATOR, '\x1F' },
    { TokenType::QUOTATION_MARK, '\"' },
    { TokenType::APOSTROPHE, '\'' },
};

static std::unordered_map<TokenType, char> numericCharsMap = {
    {TokenType::ZERO, '0'},
    {TokenType::ONE, '1'},
    {TokenType::TWO, '2'},
    {TokenType::THREE, '3'},
    {TokenType::FOUR, '4'},
    {TokenType::FIVE, '5'},
    {TokenType::SIX, '6'},
    {TokenType::SEVEN, '7'},
    {TokenType::EIGHT, '8'},
    {TokenType::NINE, '9'}
};

static std::unordered_map<std::string, TokenType> tokenLookupTable = {
    {" ", TokenType::SPACE},
    {"char", TokenType::CHAR},
    {"else", TokenType::ELSE},
    {"for", TokenType::FOR},
    {"if", TokenType::IF},
    {"int", TokenType::INT},
    {"return", TokenType::RETURN},
    {"void", TokenType::VOID},
    {"while", TokenType::WHILE},
    {"++", TokenType::INCREMENT},
    {"--", TokenType::DECREMENT},
    {"+=", TokenType::PLUS_ASSIGN},
    {"-=", TokenType::MINUS_ASSIGN},
    {"*=", TokenType::STAR_ASSIGN},
    {"/=", TokenType::DIVIDE_ASSIGN},
    {"%=", TokenType::MODULO_ASSIGN},
    {"&&", TokenType::LOGICAL_AND},
    {"||", TokenType::LOGICAL_OR},
    {"<=", TokenType::LESS_THAN_OR_EQUAL},
    {">=", TokenType::GREATER_THAN_OR_EQUAL},
    {"==", TokenType::EQUAL},
    {"!=", TokenType::NOT_EQUAL},
    {"->", TokenType::ARROW},
    {"+", TokenType::PLUS},
    {"-", TokenType::MINUS},
    {"*", TokenType::STAR},
    {"/", TokenType::DIVIDE},
    {"%", TokenType::MODULO},
    {"=", TokenType::ASSIGN},
    {"!", TokenType::LOGICAL_NOT},
    //{"<", TokenType::LESS_THAN},
    //{">", TokenType::GREATER_THAN},
    {",", TokenType::COMMA},
    {"(", TokenType::LEFT_BRACKET},
    {")", TokenType::RIGHT_BRACKET},
    {"[", TokenType::LEFT_PAREN},
    {"]", TokenType::RIGHT_PAREN},
    {"{", TokenType::LEFT_BRACE},
    {"}", TokenType::RIGHT_BRACE},
    {".", TokenType::DOT},
    {";", TokenType::SEMICOLON},
    {":", TokenType::COLON},
    {"0",TokenType::ZERO},
    {"1",TokenType::ONE},
    {"2",TokenType::TWO},
    {"3",TokenType::THREE},
    {"4",TokenType::FOUR},
    {"5",TokenType::FIVE},
    {"6",TokenType::SIX},
    {"7",TokenType::SEVEN},
    {"8",TokenType::EIGHT},
    {"9",TokenType::NINE},
    {"\"", TokenType::QUOTATION_MARK},
    {"\'", TokenType::APOSTROPHE},
    {"\0", TokenType::NULL_CHARACTER},
    {"\x01", TokenType::START_OF_HEADING},
    {"\x02", TokenType::START_OF_TEXT},
    {"\x03", TokenType::END_OF_TEXT},
    {"\x04", TokenType::END_OF_TRANSMISSION},
    {"\x05", TokenType::ENQUIRY},
    {"\x06", TokenType::ACKNOWLEDGMENT},
    {"\x07", TokenType::BELL},
    {"\x08", TokenType::BACKSPACE},
    {"\x09", TokenType::HORIZONTAL_TAB},
    {"\x0A", TokenType::LINE_FEED},
    {"\x0B", TokenType::VERTICAL_TAB},
    {"\x0C", TokenType::FORM_FEED},
    {"\x0D", TokenType::CARRIAGE_RETURN},
    {"\x0E", TokenType::SHIFT_OUT},
    {"\x0F", TokenType::SHIFT_IN},
    {"\x10", TokenType::DATA_LINK_ESCAPE},
    {"\x11", TokenType::DEVICE_CONTROL_1},
    {"\x12", TokenType::DEVICE_CONTROL_2},
    {"\x13", TokenType::DEVICE_CONTROL_3},
    {"\x14", TokenType::DEVICE_CONTROL_4},
    {"\x15", TokenType::NEGATIVE_ACKNOWLEDGMENT},
    {"\x16", TokenType::SYNCHRONOUS_IDLE},
    {"\x17", TokenType::END_OF_TRANSMISSION_BLOCK},
    {"\x18", TokenType::CANCEL},
    {"\x19", TokenType::END_OF_MEDIUM},
    {"\x1A", TokenType::SUBSTITUTE},
    {"\x1B", TokenType::ESCAPE},
    {"\x1C", TokenType::FILE_SEPARATOR},
    {"\x1D", TokenType::GROUP_SEPARATOR},
    {"\x1E", TokenType::RECORD_SEPARATOR},
    {"\x1F", TokenType::UNIT_SEPARATOR},
    {"''number''", TokenType::NUMERIC},
    {"''literal''", TokenType::LITTERAL},
    { "#", TokenType::ERROR },
    { "$", TokenType::ERROR },
    { "`", TokenType::ERROR },
    { "?", TokenType::ERROR },
    { "@", TokenType::ERROR },
    {"''literal''" ,TokenType::LITTERAL},
    {"''chr_literal''" , TokenType::CHAR_LITTERAL },
    {"''str_literal''", TokenType::STRING_LITTERAL},
    {"''error''", TokenType::ERROR }
    


};

static std::unordered_map<TokenType, std::string> allTokenStringsMap = {
    {TokenType::CHAR, "char"},
    {TokenType::ELSE, "else"},
    {TokenType::FOR, "for"},
    {TokenType::IF, "if"},
    {TokenType::INT, "int"},
    {TokenType::RETURN, "return"},
    {TokenType::VOID, "void"},
    {TokenType::WHILE, "while"},
    {TokenType::INCREMENT, "++"},
    {TokenType::DECREMENT, "--"},
    {TokenType::PLUS_ASSIGN, "+="},
    {TokenType::MINUS_ASSIGN, "-="},
    {TokenType::STAR_ASSIGN, "*="},
    {TokenType::DIVIDE_ASSIGN, "/="},
    {TokenType::MODULO_ASSIGN, "%="},
    {TokenType::LOGICAL_AND, "&&"},
    {TokenType::LOGICAL_OR, "||"},
    {TokenType::LESS_THAN_OR_EQUAL, "<="},
    {TokenType::GREATER_THAN_OR_EQUAL, ">="},
    {TokenType::EQUAL, "=="},
    {TokenType::NOT_EQUAL, "!="},
    {TokenType::ARROW, "->"},
    {TokenType::PLUS, "+"},
    {TokenType::MINUS, "-"},
    {TokenType::STAR, "*"},
    {TokenType::SPACE, "space"},
    {TokenType::DIVIDE, "/"},
    {TokenType::MODULO, "%"},
    {TokenType::ASSIGN, "="},
    {TokenType::LOGICAL_NOT, "!"},
    //{TokenType::LESS_THAN, "<"},
    //{TokenType::GREATER_THAN, ">"},
    {TokenType::COMMA, ","},
    {TokenType::LEFT_BRACKET, "("},
    {TokenType::RIGHT_BRACKET, ")"},
    {TokenType::LEFT_PAREN, "["},
    {TokenType::RIGHT_PAREN, "]"},
    {TokenType::LEFT_BRACE, "{"},
    {TokenType::RIGHT_BRACE, "}"},
    {TokenType::DOT, "."},
    {TokenType::SEMICOLON, ";"},
    {TokenType::COLON, ":"},
    {TokenType::NULL_CHARACTER, "NULL_CHARACTER"},
    {TokenType::START_OF_HEADING, "START_OF_HEADING"},
    {TokenType::START_OF_TEXT, "START_OF_TEXT"},
    {TokenType::END_OF_TEXT, "END_OF_TEXT"},
    {TokenType::END_OF_TRANSMISSION, "END_OF_TRANSMISSION"},
    {TokenType::ENQUIRY, "ENQUIRY"},
    {TokenType::ACKNOWLEDGMENT, "ACKNOWLEDGMENT"},
    {TokenType::BELL, "BELL"},
    {TokenType::BACKSPACE, "BACKSPACE"},
    {TokenType::HORIZONTAL_TAB, "HORIZONTAL_TAB"},
    {TokenType::LINE_FEED, "LINE_FEED"},
    {TokenType::VERTICAL_TAB, "VERTICAL_TAB"},
    {TokenType::FORM_FEED, "FORM_FEED"},
    {TokenType::CARRIAGE_RETURN, "CARRIAGE_RETURN"},
    {TokenType::SHIFT_OUT, "SHIFT_OUT"},
    {TokenType::SHIFT_IN, "SHIFT_IN"},
    {TokenType::DATA_LINK_ESCAPE, "DATA_LINK_ESCAPE"},
    {TokenType::DEVICE_CONTROL_1, "DEVICE_CONTROL_1"},
    {TokenType::DEVICE_CONTROL_2, "DEVICE_CONTROL_2"},
    {TokenType::DEVICE_CONTROL_3, "DEVICE_CONTROL_3"},
    {TokenType::DEVICE_CONTROL_4, "DEVICE_CONTROL_4"},
    {TokenType::NEGATIVE_ACKNOWLEDGMENT, "NEGATIVE_ACKNOWLEDGMENT"},
    {TokenType::SYNCHRONOUS_IDLE, "SYNCHRONOUS_IDLE"},
    {TokenType::END_OF_TRANSMISSION_BLOCK, "END_OF_TRANSMISSION_BLOCK"},
    {TokenType::CANCEL, "CANCEL"},
    {TokenType::END_OF_MEDIUM, "END_OF_MEDIUM"},
    {TokenType::SUBSTITUTE, "SUBSTITUTE"},
    {TokenType::ESCAPE, "ESCAPE"},
    {TokenType::FILE_SEPARATOR, "FILE_SEPARATOR"},
    {TokenType::GROUP_SEPARATOR, "GROUP_SEPARATOR"},
    {TokenType::RECORD_SEPARATOR, "RECORD_SEPARATOR"},
    {TokenType::UNIT_SEPARATOR, "UNIT_SEPARATOR"},
    {TokenType::QUOTATION_MARK, "QUOTATION_MARK"},
    {TokenType::APOSTROPHE, "APOSTROPHE"},
    {TokenType::NUMERIC,"number"},
    {TokenType::IDENTIFIER,"identifier"},
    {TokenType::LITTERAL,"literal"},
    {TokenType::CHAR_LITTERAL,"chr_literal"},
    {TokenType::STRING_LITTERAL,"str_literal"},
    {TokenType::ERROR, "error"}
};

static std::unordered_map<TokenType, char> literalDelimiters = {
    {TokenType::QUOTATION_MARK, '\"'},
    {TokenType::APOSTROPHE, '\''}
};

static std::unordered_map<TokenType, char> unusedCharsMap = {
    {TokenType::ERROR, '#'},
    {TokenType::ERROR, '$'},
    {TokenType::ERROR, '`'},
    {TokenType::ERROR, '?'},
    {TokenType::ERROR, '@'}
};

static std::unordered_map<TokenType, std::string> one_string = {
    {TokenType::INCREMENT, "++"},
    {TokenType::DECREMENT, "--"},
    {TokenType::PLUS_ASSIGN, "+="},
    {TokenType::MINUS_ASSIGN, "-="},
    {TokenType::STAR_ASSIGN, "*="},
    {TokenType::DIVIDE_ASSIGN, "/="},
    {TokenType::MODULO_ASSIGN, "%="},
    {TokenType::LOGICAL_AND, "&&"},
    {TokenType::LOGICAL_OR, "||"},
    {TokenType::LESS_THAN_OR_EQUAL, "<="},
    {TokenType::GREATER_THAN_OR_EQUAL, ">="},
    {TokenType::EQUAL, "=="},
    {TokenType::NOT_EQUAL, "!="},
    {TokenType::ARROW, "->"},
};

