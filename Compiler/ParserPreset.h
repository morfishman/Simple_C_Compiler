#pragma once

#include <unordered_map>
#include <string>
#define NUM_OF_TERMINALS 40
#define NUM_OF_NON_TERMINALS 44

#define PARSER_TABLE_STATES_NUM 167
#define PRODUCTION_RULE_NUM 108

enum class NonTerminal {
	ACCEPT,
	PROGRAM,
	FUNCTION,
	RETURN_FUNC,
	NONE_RETURN_FUNC,
	RETURN_STMT,
	SCOPE,
	BLOCK,
	STMT,
	LINE_STMT,
	CONTROL_STATEMENT,
	IF_STATEMENT,
	IF_ELSE_STATEMENT,
	WHILE_STATEMENT,
	FOR_STATEMENT,
	TYPE_CONTROL_EXP,
	CONTROL_EXP,
	FOR_EXP,
	VAL_CHANGE_TYPE,
	VAL_CHANGE,
	VAL_CHANGE_OP,
	ONARY_CHANGE_OP,
	DECLERATION,
	ASSIGN,
	ASSIGN_OR_DEC,
	COMPUTING_EXPRETION,
	BOOL_EXPRETION,
	BOOL_CMP,
	EXPR,
	BOOL_EXPR,
	ARITMATIC,
	T,
	F,
	PRE_ONARY_ARITMATIC,
	POST_ONARY_ARITMATIC,
	BOOLEAN_COMPERSION,
	BOOLEAN_COMBO,
	FUNC_CALL,
	PASS_PARAM,
	RETURN_FUNC_HEAD,
	NONE_RETURN_FUNC_HEAD,
	PARAMS,
	RETURN_TYPE,
	NONE_RETURN_TYPE
};


static std::unordered_map<NonTerminal, std::string> nonTerminalNames = {
	{NonTerminal::ACCEPT, "ACCEPT"},
	{NonTerminal::PROGRAM, "PROGRAM"},
	{NonTerminal::FUNCTION, "FUNCTION"},
	{NonTerminal::RETURN_FUNC, "RETURN_FUNC"},
	{NonTerminal::NONE_RETURN_FUNC, "NONE_RETURN_FUNC"},
	{NonTerminal::RETURN_STMT, "RETURN_STMT"},
	{NonTerminal::SCOPE, "SCOPE"},
	{NonTerminal::BLOCK, "BLOCK"},
	{NonTerminal::STMT, "STMT"},
	{NonTerminal::LINE_STMT, "LINE_STMT"},
	{NonTerminal::CONTROL_STATEMENT, "CONTROL_STATEMENT"},
	{NonTerminal::IF_STATEMENT, "IF_STATEMENT"},
	{NonTerminal::IF_ELSE_STATEMENT, "IF_ELSE_STATEMENT"},
	{NonTerminal::WHILE_STATEMENT, "WHILE_STATEMENT"},
	{NonTerminal::FOR_STATEMENT, "FOR_STATEMENT"},
	{NonTerminal::TYPE_CONTROL_EXP, "TYPE_CONTROL_EXP"},
	{NonTerminal::CONTROL_EXP, "CONTROL_EXP"},
	{NonTerminal::FOR_EXP, "FOR_EXP"},
	{NonTerminal::VAL_CHANGE_TYPE, "VAL_CHANGE_TYPE"},
	{NonTerminal::VAL_CHANGE, "VAL_CHANGE"},
	{NonTerminal::VAL_CHANGE_OP, "VAL_CHANGE_OP"},
	{NonTerminal::ONARY_CHANGE_OP, "ONARY_CHANGE_OP"},
	{NonTerminal::DECLERATION, "DECLERATION"},
	{NonTerminal::ASSIGN, "ASSIGN"},
	{NonTerminal::ASSIGN_OR_DEC, "ASSIGN_OR_DEC"},
	{NonTerminal::COMPUTING_EXPRETION, "COMPUTING_EXPRETION"},
	{NonTerminal::BOOL_EXPRETION, "BOOL_EXPRETION"},
	{NonTerminal::BOOL_CMP, "BOOL_CMP"},
	{NonTerminal::EXPR, "EXPR"},
	{NonTerminal::BOOL_EXPR, "BOOL_EXPR"},
	{NonTerminal::ARITMATIC, "ARITMATIC"},
	{NonTerminal::T, "T"},
	{NonTerminal::F, "F"},
	{NonTerminal::PRE_ONARY_ARITMATIC, "PRE_ONARY_ARITMATIC"},
	{NonTerminal::POST_ONARY_ARITMATIC, "POST_ONARY_ARITMATIC"},
	{NonTerminal::BOOLEAN_COMPERSION, "BOOLEAN_COMPERSION"},
	{NonTerminal::BOOLEAN_COMBO, "BOOLEAN_COMBO"},
	{NonTerminal::FUNC_CALL, "FUNC_CALL"},
	{NonTerminal::PASS_PARAM, "PASS_PARAM"},
	{NonTerminal::RETURN_FUNC_HEAD, "RETURN_FUNC_HEAD"},
	{NonTerminal::NONE_RETURN_FUNC_HEAD, "NONE_RETURN_FUNC_HEAD"},
	{NonTerminal::PARAMS, "PARAMS"},
	{NonTerminal::RETURN_TYPE, "RETURN_TYPE"},
	{NonTerminal::NONE_RETURN_TYPE, "NONE_RETURN_TYPE"}
};

enum class ActionType {
	ACTION_ERROR,
	ACTION_SHIFT,
	ACTION_REDUCE,
	ACTION_ACCEPT
};

enum class SymbolType {
	TERMINAL,
	NON_TERMINAL
};

